class SnakeGame {

    field Snake snake;
    field SnakeField snakeField;
    field int step;
    field int delay;

    constructor SnakeGame new() {
        let step = 0;
        let delay = 100;
        let snakeField = SnakeField.new(this);
        let snake = Snake.new(this, 
			snakeField.getHorizontal() / 2, 
			snakeField.getVertical() / 2);
        do snakeField.putBait();

        return this;
    }

    method void run() {

        var boolean broken;
        var boolean exit;
        var int key;

        let exit = false;
        while(~exit) {

            do snake.rememberDir();

            let key = Keyboard.keyPressed();
            if(key = 81) { let exit = true; }
            if(key = 130) {
                if(snake.getLastDir() = 1) { do snake.setDir(3); }
                if(snake.getLastDir() = 2) { do snake.setDir(3); }
            }
            if(key = 131) {
                if(snake.getLastDir() = 3) { do snake.setDir(1); }
                if(snake.getLastDir() = 4) { do snake.setDir(1); }
            }
            if(key = 132) {
                if(snake.getLastDir() = 1) { do snake.setDir(4); }
                if(snake.getLastDir() = 2) { do snake.setDir(4); }
            }
            if(key = 133) {
                if(snake.getLastDir() = 3) { do snake.setDir(2); }
                if(snake.getLastDir() = 4) { do snake.setDir(2); }
            }

            if(~snake.tryMove()) {
                do Sys.halt();
            }

            if(snakeField.checkBait(snake.getPositionHorizontal(), snake.getPositionVertical())) {
                do snake.takeBait();
                do snakeField.putBait();
            }

            do snake.grow(step);
            do snakeField.drawBait();
            do Sys.wait(delay);
            do nextStep();

            if(snake.checkRewriteHistory()) {
                let step = snake.getLength();
            }
        }
        do Sys.halt();
        return;
    }

    method int nextStep() {
        let step = step + 1;
        return step;
    }

    method SnakeField getSnakeField() {
        return snakeField;
    }
	
    method int getStep() {
        return step;
    }
	
	method void dispose() {
        do snake.dispose();
        do snakeField.dispose();
        do Memory.deAlloc(this);
        return;
    }

}
