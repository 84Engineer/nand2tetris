class Tank {

	field int memAddress;
	field int upperBorder;
	field int downBorder;
	field int horizontalLocation;
	filed int lastDirection;

	constructor Tank new(int initLoc) {
		let upperBorder = 16384;
		let downBorder = upperBorder + 8192;
		let memAddress = upperBorder + initLoc;
		let horizontalLocation = 0;
		return this;
	}
	
	method void moveUp() {
		if (~((memAddress - 512) < upperBorder)) {
			do erase();
			let memAddress = memAddress - 512;
			do drawUp();
		}
		return;
	}
	
	method void moveDown() {
		if ((downBorder > (memAddress + 512))) {
			do erase();
			let memAddress = memAddress + 512;
			do drawDown();
		}
		return;
	}
	
	method void moveLeft() {
		if (~((horizontalLocation - 1) < 0)) {
			do erase();
			let horizontalLocation = horizontalLocation - 1;
			let memAddress = memAddress - 1;
			do drawLeft();
		}
		return;
	}
	
	method void moveRight() {
		if (((horizontalLocation + 1) < 32)) {
			do erase();
			let horizontalLocation = horizontalLocation + 1;
			let memAddress = memAddress + 1;
			do drawRight();
		}
		return;
	}
	
	method Bullet shoot() {
		if (lastDirection = 3) {
			var Bullet bullet;
			let bullet = Bullet.new(memAddress + 256 + 1);
		}
		return bullet;
	
	}
	
	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}
   
	method void drawUp() {
		do Memory.poke(memAddress+0, 960);
		do Memory.poke(memAddress+32, 384);
		do Memory.poke(memAddress+64, 384);
		do Memory.poke(memAddress+96, 29070);
		do Memory.poke(memAddress+128, 20874);
		do Memory.poke(memAddress+160, 20874);
		do Memory.poke(memAddress+192, 21450);
		do Memory.poke(memAddress+224, 21546);
		do Memory.poke(memAddress+256, 22938);
		do Memory.poke(memAddress+288, 22554);
		do Memory.poke(memAddress+320, 22938);
		do Memory.poke(memAddress+352, 21546);
		do Memory.poke(memAddress+384, 21450);
		do Memory.poke(memAddress+416, 28686);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		let lastDirection = 0;
		return;
	}
	
	method void drawDown() {
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 28686);
		do Memory.poke(memAddress+96, 21450);
		do Memory.poke(memAddress+128, 21546);
		do Memory.poke(memAddress+160, 22938);
		do Memory.poke(memAddress+192, 22554);
		do Memory.poke(memAddress+224, 22938);
		do Memory.poke(memAddress+256, 21546);
		do Memory.poke(memAddress+288, 21450);
		do Memory.poke(memAddress+320, 20874);
		do Memory.poke(memAddress+352, 20874);
		do Memory.poke(memAddress+384, 29070);
		do Memory.poke(memAddress+416, 384);
		do Memory.poke(memAddress+448, 384);
		do Memory.poke(memAddress+480, 960);
		let lastDirection = 1;
		return;
	}
	
	method void drawLeft() {
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 16376);
		do Memory.poke(memAddress+64, 8200);
		do Memory.poke(memAddress+96, 16376);
		do Memory.poke(memAddress+128, 1792);
		do Memory.poke(memAddress+160, 2176);
		do Memory.poke(memAddress+192, 4161);
		do Memory.poke(memAddress+224, 5503);
		do Memory.poke(memAddress+256, 5503);
		do Memory.poke(memAddress+288, 4161);
		do Memory.poke(memAddress+320, 2176);
		do Memory.poke(memAddress+352, 1792);
		do Memory.poke(memAddress+384, 16376);
		do Memory.poke(memAddress+416, 8200);
		do Memory.poke(memAddress+448, 16376);
		do Memory.poke(memAddress+480, 0);
		let lastDirection = 2;
		return;
	}
	
	method void drawRight() {
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 8188);
		do Memory.poke(memAddress+64, 4100);
		do Memory.poke(memAddress+96, 8188);
		do Memory.poke(memAddress+128, 224);
		do Memory.poke(memAddress+160, 272);
		do Memory.poke(memAddress+192, -32248);
		do Memory.poke(memAddress+224, -344);
		do Memory.poke(memAddress+256, -344);
		do Memory.poke(memAddress+288, -32248);
		do Memory.poke(memAddress+320, 272);
		do Memory.poke(memAddress+352, 224);
		do Memory.poke(memAddress+384, 8188);
		do Memory.poke(memAddress+416, 4100);
		do Memory.poke(memAddress+448, 8188);
		do Memory.poke(memAddress+480, 0);
		let lastDirection = 3;
		return;
	}
	
	method void erase() {
		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);
		return;
	}


}