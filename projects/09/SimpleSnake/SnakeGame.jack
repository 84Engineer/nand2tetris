class SnakeGame {

    field Snake snake;
    field SnakeGrid grid;
    field int cycle;
    field int delay;

    constructor SnakeGame new() {

        do Random.setSeed(42);

        let cycle = 0;
        let delay = 100;
        let grid = SnakeGrid.new(this, 512, 256);
        let snake = Snake.new(this, grid.sizeX() / 2, grid.sizeY() / 2, 10, 3);
        do grid.placeFood();

        return this;
    }

    method void dispose() {

        do snake.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);

        return;

    }

    method void run() {

        var boolean broken;
        var boolean exit;
        var int key;

        let exit = false;
        while(~exit) {

            do snake.rememberDir();

            let key = Keyboard.keyPressed();
            if(key = 81) {
                let exit = true;
            }
            if(key = 130) {
                if(snake.getLastDir() = 1) {
                    do snake.setDir(3);
                }
                if(snake.getLastDir() = 2) {
                    do snake.setDir(3);
                }
            }
            if(key = 131) {
                if(snake.getLastDir() = 3) {
                    do snake.setDir(1);
                }
                if(snake.getLastDir() = 4) {
                    do snake.setDir(1);
                }
            }
            if(key = 132) {
                if(snake.getLastDir() = 1) {
                    do snake.setDir(4);
                }
                if(snake.getLastDir() = 2) {
                    do snake.setDir(4);
                }
            }
            if(key = 133) {
                if(snake.getLastDir() = 3) {
                    do snake.setDir(2);
                }
                if(snake.getLastDir() = 4) {
                    do snake.setDir(2);
                }
            }

            if(~snake.tryMove()) {
                do Sys.halt();
            }

            if(grid.checkFood(snake.posX(), snake.posY())) {
                do snake.eatFood();
                do grid.placeFood();
            }

            do snake.grow(cycle);
            do grid.drawFood();
            do Sys.wait(delay);
            do nextCycle();

            if(snake.checkRewriteHistory()) {
                let cycle = snake.getLength();
            }
        }

        do Sys.halt();

        return;

    }

    method int nextCycle() {
        let cycle = cycle + 1;
        return cycle;
    }

    method SnakeGrid getGrid() {
        return grid;
    }
    method Snake getSnake() {
        return snake;
    }
    method int getCycle() {
        return cycle;
    }

}
