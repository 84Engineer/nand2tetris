class Snake {

    field SnakeGame game;
    field int positionHorizontal, positionVertical;
    field int length;
    field int growby;
    field int togrow;
    field int dir, lastdir;
    field Array historyHorizontal, historyVertical;
    field int history;

    constructor Snake new(SnakeGame theGame, int initX, int initY) {

        var int i;
        let game = theGame;
        let positionHorizontal = initX - 5;
        let positionVertical = initY;
        let length = 5;
        let growby = 1;

        let togrow = 0;
        let dir = 4;
        let lastdir = 4;
        let history = 256;
        let historyHorizontal = Array.new(history);
        let historyVertical = Array.new(history);

        let i = 0;
        while(i < length) {
            let positionHorizontal = positionHorizontal + 1;
            do drawHead(game.getStep());
            let i = i + 1;
            do game.nextStep();
        }
        return this;
    }

    method boolean checkRewriteHistory() {

        if(game.getStep() = history) {
            do rewriteHistory();
            return true;
        }
        return false;
    }

    method void rewriteHistory() {
        var int i;
		var int source;
		var int destination;
        let i = length;
        let destination = 0;
        let source = history - length;
        while(i > 0) {
            let historyHorizontal[destination] = historyHorizontal[source];
            let historyVertical[destination] = historyVertical[source];
            let source = source + 1;
            let destination = destination + 1;
            let i = i - 1;
        }
        return;
    }

    method int getPositionHorizontal() {
        return positionHorizontal;
    }
    method int getPositionVertical() {
        return positionVertical;
    }

    method int getLength() {
        return length;
    }

    method int getDir() {
        return dir;
    }

    method int getLastDir() {
        return lastdir;
    }

    method void setDir(int newdir) {
        let dir = newdir;
        return;
    }

    method void rememberDir() {
        let lastdir = dir;
        return;
    }

    method boolean tryMove() {

        var SnakeField snakeField;
        let snakeField = game.getSnakeField();

        if(dir = 1) {
            if(positionVertical = 0) { return false; } 
				else { let positionVertical = positionVertical - 1; }
        }
        if(dir = 2) {
            if(positionVertical = snakeField.getVertical()) { return false; } 
				else { let positionVertical = positionVertical + 1; }
        }
        if(dir = 3) {
            if(positionHorizontal = 0) { return false; } 
				else { let positionHorizontal = positionHorizontal - 1; }
        }
        if(dir = 4) { 
            if(positionHorizontal = snakeField.getHorizontal()) { return false; } 
				else { let positionHorizontal = positionHorizontal + 1; }
        }
        if(snakeField.getFilled(positionHorizontal, positionVertical)) { return false; }
        return true;
    }

    method void grow(int step) {
        do drawHead(step);
        if(togrow > 0) {
            let togrow = togrow - 1;
            let length = length + 1;
        } else {
            do clearTail(step);
        }
        return;
    }

    method void drawHead(int step) {
        var SnakeField snakeField;
        let snakeField = game.getSnakeField();
        do snakeField.drawBox(positionHorizontal, positionVertical);
        let historyHorizontal[step] = positionHorizontal;
        let historyVertical[step] = positionVertical;
        return;
    }

    method void clearTail(int step) {
        var SnakeField snakeField;
        var int tailIndex, tailX, tailY;
        let tailIndex = step - length;
        let tailX = historyHorizontal[tailIndex];
        let tailY = historyVertical[tailIndex];
        let snakeField = game.getSnakeField();
        do snakeField.clearBox(tailX, tailY);
        return;
    }

    method void takeBait() {
        let togrow = togrow + growby;
        return;
    }
	
    method void dispose() {
        do historyHorizontal.dispose();
        do historyVertical.dispose();
        do Memory.deAlloc(this);
        return;
    }
}